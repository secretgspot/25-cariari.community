// Helper function to make requests (paste this once at the top of your console)
async function makeRequest(method, url, body = null, isJson = false) {
    const headers = {};
    // For authenticated requests, browser automatically sends cookies
    if (isJson) {
        headers["Content-Type"] = "application/json";
    }

    const options = {
        method: method,
        headers: headers
    };
    if (body) {
        options.body = body instanceof FormData ? body : JSON.stringify(body);
    }

    try {
        const response = await fetch(url, options);
        const result = await response.json();
        console.log(`  ${method} ${url} -> Status: ${response.status}, Result:`, result);
        return { result, status: response.status };
    } catch (e) {
        console.error(`  ${method} ${url} -> Error:`, e);
        return { result: null, status: null };
    }
}

const TEST_USER_ID = 'b0461daa-d0a2-4c72-8823-48dc6a080530';

console.log("--- Starting API Tests ---");

let notice_id_1 = null;
let notice_id_2 = null;
let comment_id_notice = null;
let event_id_1 = null;
let event_id_2 = null;
let comment_id_event = null;
let post_id_1 = null;
let post_id_2 = null;
let comment_id_post = null;

// --- Notices Tests ---
console.log("\n--- Notices Tests ---");

// 1. Create Notice 1
console.log("Creating Notice 1...");
let formDataNotice1 = new FormData();
const notice1Title = `Test Notice 1 - ${new Date().getTime()}`;
formDataNotice1.append("title", notice1Title);
formDataNotice1.append("content", "This is the content for test notice 1.");
formDataNotice1.append("category", "General");
formDataNotice1.append("tags", "test,api");
let { result, status } = await makeRequest("POST", "/api/notices", formDataNotice1);
if (status === 201) {
    console.log("Notice 1 created successfully.");
} else {
    console.log("Failed to create Notice 1.");
}

// 2. Create Notice 2
console.log("Creating Notice 2...");
let formDataNotice2 = new FormData();
const notice2Title = `Test Notice 2 - ${new Date().getTime()}`;
formDataNotice2.append("title", notice2Title);
formDataNotice2.append("content", "This is the content for test notice 2.");
formDataNotice2.append("category", "Urgent");
formDataNotice2.append("tags", "urgent,test");
({ result, status } = await makeRequest("POST", "/api/notices", formDataNotice2));
if (status === 201) {
    console.log("Notice 2 created successfully.");
} else {
    console.log("Failed to create Notice 2.");
}

// 3. List Notices (verify creation and get IDs)
console.log("Listing Notices...");
({ result, status } = await makeRequest("GET", "/api/notices"));
if (status === 200 && result && result.notices) {
    console.log(`Found ${result.total} notices.`);
    for (const notice of result.notices) {
        if (notice.title === notice1Title) {
            notice_id_1 = notice.id;
        } else if (notice.title === notice2Title) {
            notice_id_2 = notice.id;
        }
    }
    console.log(`Notice 1 ID: ${notice_id_1}, Notice 2 ID: ${notice_id_2}`);
} else {
    console.log("Failed to list notices.");
}

// 4. Edit Notice 1
if (notice_id_1) {
    console.log(`Editing Notice 1 (ID: ${notice_id_1})...`);
    const editData = {"title": `Test Notice 1 - Edited - ${new Date().getTime()}`, "content": "Updated content for notice 1."};
    ({ result, status } = await makeRequest("PATCH", `/api/notices/${notice_id_1}`, editData, true));
    if (status === 200) {
        console.log("Notice 1 edited successfully.");
    } else {
        console.log("Failed to edit Notice 1.");
    }
}

// 5. Add Comment to Notice 1
if (notice_id_1) {
    console.log(`Adding comment to Notice 1 (ID: ${notice_id_1})...`);
    const commentData = {"news_id": notice_id_1, "content": "This is a test comment for notice 1."};
    ({ result, status } = await makeRequest("POST", "/api/comments", commentData, true));
    if (status === 201) {
        console.log("Comment added to Notice 1 successfully.");
    } else {
        console.log("Failed to add comment to Notice 1.");
    }
}

// 6. List Comments for Notice 1 (verify comment and get ID)
if (notice_id_1) {
    console.log(`Listing comments for Notice 1 (ID: ${notice_id_1})...`);
    ({ result, status } = await makeRequest("GET", `/api/notices/${notice_id_1}/comments`));
    if (status === 200 && result && result.comments) {
        console.log(`Found ${result.comments.length} comments for Notice 1.`);
        if (result.comments.length > 0) {
            comment_id_notice = result.comments[0].id;
            console.log(`Comment ID for Notice 1: ${comment_id_notice}`);
        }
    } else {
        console.log("Failed to list comments for Notice 1.");
    }
}

// 7. Delete Comment from Notice 1
if (comment_id_notice) {
    console.log(`Deleting comment (ID: ${comment_id_notice}) from Notice 1...`);
    ({ result, status } = await makeRequest("DELETE", `/api/comments/${comment_id_notice}`));
    if (status === 200) {
        console.log("Comment deleted successfully.");
    } else {
        console.log("Failed to delete comment.");
    }
}

// 8. Delete Notice 2
if (notice_id_2) {
    console.log(`Deleting Notice 2 (ID: ${notice_id_2})...`);
    ({ result, status } = await makeRequest("DELETE", `/api/notices/${notice_id_2}`));
    if (status === 200) {
        console.log("Notice 2 deleted successfully.");
    } else {
        console.log("Failed to delete Notice 2.");
}
}

// 9. List Notices (verify deletion)
console.log("Listing Notices after deletions...");
({ result, status } = await makeRequest("GET", "/api/notices"));
if (status === 200 && result && result.notices) {
    console.log(`Found ${result.total} notices after deletions.`);
} else {
    console.log("Failed to list notices after deletions.");
}

// 10. Delete all Notices for TEST_USER_ID (replace with your actual user ID if testing this)
// console.log(`Deleting all Notices for user ${TEST_USER_ID}...`);
// ({ result, status } = await makeRequest("DELETE", `/api/users/${TEST_USER_ID}/notices`));
// if (status === 200) {
//     console.log("All Notices for user deleted successfully.");
// } else {
//     console.log("Failed to delete all Notices for user.");
// }

console.log("--- Notices API Tests Complete ---");

// --- Events Tests ---
console.log("\n--- Events Tests ---");

// 1. Create Event 1
console.log("Creating Event 1...");
let formDataEvent1 = new FormData();
const event1Title = `Community Picnic - ${new Date().getTime()}`;
formDataEvent1.append("title", event1Title);
formDataEvent1.append("description", "Annual community picnic at the park.");
formDataEvent1.append("event_date", "2025-08-15T14:00:00");
formDataEvent1.append("location", "Central Park");
({ result, status } = await makeRequest("POST", "/api/events", formDataEvent1));
if (status === 201) {
    console.log("Event 1 created successfully.");
} else {
    console.log("Failed to create Event 1.");
}

// 2. Create Event 2
console.log("Creating Event 2...");
let formDataEvent2 = new FormData();
const event2Title = `Town Hall Meeting - ${new Date().getTime()}`;
formDataEvent2.append("title", event2Title);
formDataEvent2.append("description", "Meeting to discuss local development.");
formDataEvent2.append("event_date", "2025-09-01T18:30:00");
formDataEvent2.append("location", "Town Hall");
({ result, status } = await makeRequest("POST", "/api/events", formDataEvent2));
if (status === 201) {
    console.log("Event 2 created successfully.");
} else {
    console.log("Failed to create Event 2.");
}

// 3. List Events (verify creation and get IDs)
console.log("Listing Events...");
({ result, status } = await makeRequest("GET", "/api/events"));
if (status === 200 && result && result.events) {
    console.log(`Found ${result.total} events.`);
    for (const event of result.events) {
        if (event.title === event1Title) {
            event_id_1 = event.id;
        } else if (event.title === event2Title) {
            event_id_2 = event.id;
        }
    }
    console.log(`Event 1 ID: ${event_id_1}, Event 2 ID: ${event_id_2}`);
} else {
    console.log("Failed to list events.");
}

// 4. Edit Event 1
if (event_id_1) {
    console.log(`Editing Event 1 (ID: ${event_id_1})...`);
    const editData = {"title": `Community Picnic - Rescheduled - ${new Date().getTime()}`, "location": "Community Center"};
    ({ result, status } = await makeRequest("PATCH", `/api/events/${event_id_1}`, editData, true));
    if (status === 200) {
        console.log("Event 1 edited successfully.");
    } else {
        console.log("Failed to edit Event 1.");
    }
}

// 5. Add Comment to Event 1
if (event_id_1) {
    console.log(`Adding comment to Event 1 (ID: ${event_id_1})...`);
    const commentData = {"event_id": event_id_1, "content": "Looking forward to this event!"};
    ({ result, status } = await makeRequest("POST", "/api/comments", commentData, true));
    if (status === 201) {
        console.log("Comment added to Event 1 successfully.");
    } else {
        console.log("Failed to add comment to Event 1.");
    }
}

// 6. List Comments for Event 1 (verify comment and get ID)
if (event_id_1) {
    console.log(`Listing comments for Event 1 (ID: ${event_id_1})...`);
    ({ result, status } = await makeRequest("GET", `/api/events/${event_id_1}/comments`));
    if (status === 200 && result && result.comments) {
        console.log(`Found ${result.comments.length} comments for Event 1.`);
        if (result.comments.length > 0) {
            comment_id_event = result.comments[0].id;
            console.log(`Comment ID for Event 1: ${comment_id_event}`);
        }
    } else {
        console.log("Failed to list comments for Event 1.");
    }
}

// 7. Delete Comment from Event 1
if (comment_id_event) {
    console.log(`Deleting comment (ID: ${comment_id_event}) from Event 1...`);
    ({ result, status } = await makeRequest("DELETE", `/api/comments/${comment_id_event}`));
    if (status === 200) {
        console.log("Comment deleted successfully.");
    } else {
        console.log("Failed to delete comment.");
    }
}

// 8. Delete Event 2
if (event_id_2) {
    console.log(`Deleting Event 2 (ID: ${event_id_2})...`);
    ({ result, status } = await makeRequest("DELETE", `/api/events/${event_id_2}`));
    if (status === 200) {
        console.log("Event 2 deleted successfully.");
    } else {
        console.log("Failed to delete Event 2.");
    }
}

// 9. List Events (verify deletion)
console.log("Listing Events after deletions...");
({ result, status } = await makeRequest("GET", "/api/events"));
if (status === 200 && result && result.events) {
    console.log(`Found ${result.total} events after deletions.`);
} else {
    console.log("Failed to list events after deletions.");
}

// 10. Delete all Events for TEST_USER_ID (replace with your actual user ID if testing this)
// console.log(`Deleting all Events for user ${TEST_USER_ID}...`);
// ({ result, status } = await makeRequest("DELETE", `/api/users/${TEST_USER_ID}/events`));
// if (status === 200) {
//     console.log("All Events for user deleted successfully.");
// } else {
//     console.log("Failed to delete all Events for user.");
// }

console.log("--- Events API Tests Complete ---");

// --- Lost & Found Tests ---
console.log("\n--- Lost & Found Tests ---");

// 1. Create Lost & Found Post 1
console.log("Creating Lost & Found Post 1...");
let formDataPost1 = new FormData();
formDataPost1.append("item_name", `Lost Keys - ${new Date().getTime()}`);
formDataPost1.append("description", "Set of car keys lost near the community pool.");
formDataPost1.append("type", "lost");
formDataPost1.append("date_lost_found", "2025-07-20");
formDataPost1.append("contact_info", "john.doe@example.com");
({ result, status } = await makeRequest("POST", "/api/lost-and-found", formDataPost1));
if (status === 201) {
    console.log("Lost & Found Post 1 created successfully.");
} else {
    console.log("Failed to create Lost & Found Post 1.");
}

// 2. Create Lost & Found Post 2
console.log("Creating Lost & Found Post 2...");
let formDataPost2 = new FormData();
formDataPost2.append("item_name", `Found Wallet - ${new Date().getTime()}`);
formDataPost2.append("description", "Brown leather wallet found on Main Street.");
formDataPost2.append("type", "found");
formDataPost2.append("date_lost_found", "2025-07-25");
formDataPost2.append("contact_info", "jane.smith@example.com");
({ result, status } = await makeRequest("POST", "/api/lost-and-found", formDataPost2));
if (status === 201) {
    console.log("Lost & Found Post 2 created successfully.");
} else {
    console.log("Failed to create Lost & Found Post 2.");
}

// 3. List Lost & Found Posts (verify creation and get IDs)
console.log("Listing Lost & Found Posts...");
({ result, status } = await makeRequest("GET", "/api/lost-and-found"));
if (status === 200 && result && result.posts) {
    console.log(`Found ${result.total} posts.`);
    for (const post of result.posts) {
        if (post.item_name.startsWith("Lost Keys")) {
            post_id_1 = post.id;
        } else if (post.item_name.startsWith("Found Wallet")) {
            post_id_2 = post.id;
        }
    }
    console.log(`Post 1 ID: ${post_id_1}, Post 2 ID: ${post_id_2}`);
} else {
    console.log("Failed to list Lost & Found posts.");
}

// 4. Edit Lost & Found Post 1
if (post_id_1) {
    console.log(`Editing Lost & Found Post 1 (ID: ${post_id_1})...`);
    const editData = {"description": "Set of car keys lost near the community pool. Has a blue keychain."};
    ({ result, status } = await makeRequest("PATCH", `/api/lost-and-found/${post_id_1}`, editData, true));
    if (status === 200) {
        console.log("Lost & Found Post 1 edited successfully.");
    } else {
        console.log("Failed to edit Lost & Found Post 1.");
    }
}

// 5. Add Comment to Lost & Found Post 1
if (post_id_1) {
    console.log(`Adding comment to Lost & Found Post 1 (ID: ${post_id_1})...`);
    const commentData = {"lost_and_found_id": post_id_1, "content": "I think I saw those keys!"};
    ({ result, status } = await makeRequest("POST", "/api/comments", commentData, true));
    if (status === 201) {
        console.log("Comment added to Lost & Found Post 1 successfully.");
    } else {
        console.log("Failed to add comment to Lost & Found Post 1.");
    }
}

// 6. List Comments for Lost & Found Post 1 (verify comment and get ID)
if (post_id_1) {
    console.log(`Listing comments for Lost & Found Post 1 (ID: ${post_id_1})...`);
    ({ result, status } = await makeRequest("GET", `/api/lost-and-found/${post_id_1}/comments`));
    if (status === 200 && result && result.comments) {
        console.log(`Found ${result.comments.length} comments for Lost & Found Post 1.`);
        if (result.comments.length > 0) {
            comment_id_post = result.comments[0].id;
            console.log(`Comment ID for Lost & Found Post 1: ${comment_id_post}`);
        }
    } else {
        console.log("Failed to list comments for Lost & Found Post 1.");
    }
}

// 7. Delete Comment from Lost & Found Post 1
if (comment_id_post) {
    console.log(`Deleting comment (ID: ${comment_id_post}) from Lost & Found Post 1...`);
    ({ result, status } = await makeRequest("DELETE", `/api/comments/${comment_id_post}`));
    if (status === 200) {
        console.log("Comment deleted successfully.");
    } else {
        console.log("Failed to delete comment.");
    }
}

// 8. Delete Lost & Found Post 2
if (post_id_2) {
    console.log(`Deleting Lost & Found Post 2 (ID: ${post_id_2})...`);
    ({ result, status } = await makeRequest("DELETE", `/api/lost-and-found/${post_id_2}`));
    if (status === 200) {
        console.log("Post 2 deleted successfully.");
    } else {
        console.log("Failed to delete Lost & Found Post 2.");
    }
}

// 9. List Lost & Found Posts (verify deletion)
console.log("Listing Lost & Found Posts after deletions...");
({ result, status } = await makeRequest("GET", "/api/lost-and-found"));
if (status === 200 && result && result.posts) {
    console.log(`Found ${result.total} posts after deletions.`);
} else {
    console.log("Failed to list Lost & Found posts after deletions.");
}

// 10. Delete all Lost & Found Posts for TEST_USER_ID (replace with your actual user ID if testing this)
// console.log(`Deleting all Lost & Found Posts for user ${TEST_USER_ID}...`);
// ({ result, status } = await makeRequest("DELETE", `/api/users/${TEST_USER_ID}/lost-and-found`));
// if (status === 200) {
//     console.log("All Lost & Found Posts for user deleted successfully.");
// } else {
//     console.log("Failed to delete all Lost & Found Posts for user.");
// }

console.log("--- Lost & Found API Tests Complete ---");